const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const logger = require('morgan');

// const indexRouter = require('./routes/index');
// const usersRouter = require('./routes/users');

//const signupRouter = require('./routes/signup');
// const signinRouter = require('./routes/signin');
const gameRouter = require('./routes/games');


const app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

// app.use('/', indexRouter);
// app.use('/users', usersRouter);

// app.use('/signup', signupRouter);
// app.use('/signin', signinRouter);
app.use('/games', gameRouter);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
/*
CREATE TABLE IF NOT EXISTS games(
    gameId integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    player1Id integer,
    player2Id integer,
    createdAt date
    
);

CREATE TABLE IF NOT EXISTS players(
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name text NOT NULL CHECK (name <> ''),
    password text
);

CREATE TABLE IF NOT EXISTS pieces(
    pieceId integer,
    typeOfPiece text NOT NULL CHECK (typeOfPiece <> ''),
    playerId integer,
    currentPos integer,
    isDead integer,
    updatedAt date,
    gameId integer
);

*/
